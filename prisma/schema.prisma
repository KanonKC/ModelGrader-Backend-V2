// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
    id              String   @id @default(cuid())
    email           String   @unique
    username        String   @unique
    password        String
    accessToken     String?  @unique
    refreshToken    String?
    tokenExpireAt   DateTime?
    problems        Problem[]
    submissions     Submission[]
    collections     Collection[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Problem {
    id              String   @id @default(cuid())
    creatorId       String
    creator         Account  @relation(fields: [creatorId], references: [id])
    title           String
    description     String?
    solution        ProblemSolution?
    testcases       Testcase[]
    submissions     Submission[]
    collections     Collection[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ProblemSolution {
    id             String   @id @default(cuid())
    problemId      String   @unique
    problem        Problem  @relation(fields: [problemId], references: [id])
    code           String
    language       String
    timeLimitMs     Int
    memoryLimitKb   Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Testcase {
    id                      String   @id @default(cuid())
    problemId               String
    problem                 Problem  @relation(fields: [problemId], references: [id])
    inputFilename           String
    outputFilename          String
    order                   Int
    isError                 Boolean  @default(false)
    isTimeLimitExceeded     Boolean  @default(false)
    isMemoryLimitExceeded   Boolean  @default(false)
    isDeprecated            Boolean  @default(false)
    submissionTestcases     SubmissionTestcase[]
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

model Submission {
    id                  String   @id @default(cuid())
    submitterId         String
    submitter           Account  @relation(fields: [submitterId], references: [id])
    problemId           String
    problem             Problem  @relation(fields: [problemId], references: [id])
    submitCode          String
    submitCodeLanguage  String
    isPassed            Boolean 
    score               Int
    testcases           SubmissionTestcase[]
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model SubmissionTestcase {
    id                      String   @id @default(cuid())
    submissionId            String
    submission              Submission  @relation(fields: [submissionId], references: [id])
    testcaseId              String
    testcase                Testcase  @relation(fields: [testcaseId], references: [id])
    outputFilename          String
    isPassed                Boolean
    timeMs                  Int
    memoryKb                Int
    isError                 Boolean
    isTimeLimitExceeded     Boolean
    isMemoryLimitExceeded   Boolean
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
}

model Collection {
    id          String   @id @default(cuid())
    creatorId   String
    creator     Account  @relation(fields: [creatorId], references: [id])
    title       String
    description String?
    problems    Problem[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}